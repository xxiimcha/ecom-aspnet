@using Ecommerce.Models
@using Ecommerce.Services
@inject CartService CartService

<div class="card cart-table-spacing">
    <div class="product">
        <!-- Product Image
        Change the url in background-image to change the image
        -->
        <div class="image" style="background-image: url('@(Item?.image_url ?? "./wwwroot/assets/images/kitchen.png")')"></div>

        <!-- Product Details -->
        <div class="details">
            <h6 class="name">@Item?.Name</h6>
            <p class="light brand">@Item?.Brand</p>
            <p class="price">₱@Item?.Price</p>
        </div>
    </div>

    <div class="quantity">
        <!-- Product Quantity -->
        <div class="controller">
            <!-- Minus Quantity button -->
            <button class="minus-quantity" @onclick="() => UpdateQuantity(-1)">
                <svg xmlns="http://www.w3.org/2000/svg" width="15.807" height="3" viewBox="0 0 15.807 3">
                    <line id="Line_2" data-name="Line 2" x2="12.807" transform="translate(1.5 1.5)" fill="none" stroke="#503fac" stroke-linecap="round" stroke-width="3" />
                </svg>
            </button>

            <!-- Quantity Input -->
            <input value="@Item?.quantity" readonly />
    
            <!-- Add Quantity Button -->
            <button class="add-quantity" @onclick="() => UpdateQuantity(1)">
                <svg xmlns="http://www.w3.org/2000/svg" width="15.807" height="15.807" viewBox="0 0 15.807 15.807">
                    <g id="Group_193" data-name="Group 193" transform="translate(1.5 1.5)">
                        <line id="Line_1" data-name="Line 1" y2="12.807" transform="translate(6.404)" fill="none" stroke="#503fac" stroke-linecap="round" stroke-width="3" />
                        <line id="Line_2" data-name="Line 2" x2="12.807" transform="translate(0 6.404)" fill="none" stroke="#503fac" stroke-linecap="round" stroke-width="3" />
                    </g>
                </svg>
            </button>
        </div>
    </div>

    <!-- Product Total Price -->
    <div class="price">
        <p>₱@(Item?.Price * Item?.quantity)</p>
    </div>

    <div class="actions">
        <!-- Remove from Cart button -->
        <button class="outline" @onclick="RemoveFromCart">
            <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path d="M17.17,34.12v42C17.17,88,25.51,97,36.57,97H63.43c11.06,0,19.4-9,19.4-20.89v-42a8.95,8.95,0,0,0-1.5-17.77h-12A14.85,14.85,0,0,0,54.56,3H45.44A14.85,14.85,0,0,0,30.68,16.35h-12a8.95,8.95,0,0,0-1.5,17.77ZM63.43,91H36.57c-7.78,0-13.43-6.27-13.43-14.92V34.25H76.86V76.11C76.86,84.76,71.21,91,63.43,91ZM45.44,9h9.12a8.87,8.87,0,0,1,8.73,7.38H36.71A8.87,8.87,0,0,1,45.44,9ZM18.67,22.31H81.33a3,3,0,1,1,0,6H18.67a3,3,0,1,1,0-6Z" /><path d="M60.44,43.29a3,3,0,0,0-3,3V76.11a3,3,0,1,0,6,0V46.27A3,3,0,0,0,60.44,43.29Z" /><path d="M39.56,43.29a3,3,0,0,0-3,3V76.11a3,3,0,1,0,6,0V46.27A3,3,0,0,0,39.56,43.29Z" /></svg>
        </button>
    </div>
</div>

@code {
    // Place your code here
    [Parameter] public ProductModel? Product {get; set;}
    [Parameter] public int ProductId { get; set; } 
    [Parameter] public int Quantity {get; set;}
    [Parameter] public string? UserID {get; set;}
    [Parameter] public CartItemModel? Item {get; set;}
    private List<CartItemModel> cartItems = new List<CartItemModel>();
    [Parameter] public EventCallback<int> OnRemove { get; set; }

    private async Task RemoveItem()
    {
        await OnRemove.InvokeAsync(Item.Id);
    }

    private async Task UpdateQuantity(int change)
    {
        if (Item != null && UserID != null)
        {
            int newQuantity = Item.quantity + change;

            if (newQuantity > 0)
            {
                Item.quantity = newQuantity;

                await CartService.UpdateCartItemQuantity(Item.Id, UserID, newQuantity);
            }
        }
    }

    private async Task RemoveFromCart()
    {
        Console.WriteLine($"Removing product with ID {Item?.Id} for user {UserID}");
        if (ProductId > 0 && !string.IsNullOrEmpty(UserID))
        {
            await CartService.RemoveFromCart(Item.Id, UserID);
            var updatedCartItems = await CartService.GetCartItemsAsync(UserID);
            cartItems = updatedCartItems;
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Invalid productId or userID.");
        }
    }


}
