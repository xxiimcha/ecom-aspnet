@page "/products"
@rendermode InteractiveServer
@using Ecommerce.Components.Shared
@using Ecommerce.Components.Shared.Misc
@inject HttpClient Http

<NavBar Current="Products" />

<div class="products-page">
    <!-- HEADER SECTION -->
    <section class="header">
        <h1>@selectedCategory</h1>
        <div class="oval" style="background-image: url('/assets/images/@GetCategoryImage()')">
            <div class="overlay"></div>
        </div>
    </section>

    <section class="content">
        <!-- SIDEBAR -->
        <div class="sidebar outline-card">
            <div class="categories">
                <!-- Categories -->
                <h6>Category</h6>
                <div class="options">
                    @foreach (var category in categories)
                    {
                        <button class="@(selectedCategory == category ? "active" : "")" @onclick="@(() => ChangeCategory(category))">@category</button>
                    }
                </div>
            </div>

            <span></span>

            <!-- Filters -->
            <div class="filters">
                <h6>Filter by:</h6>

                <!-- Type Filter -->
                <div class="type-filter">
                    <h6>Type</h6>
                    <div class="options">
                        @foreach (var type in availableTypes)
                        {
                            <!-- Ensure FilterTypeCheckbox matches your component structure -->
                            <label>
                                <input type="checkbox" @onchange="() => FilterByType(type)" />
                                @type
                            </label>
                        }
                    </div>
                </div>

                <!-- Price Filter -->
                <div class="price-filter">
                    <h6>Price</h6>
                    <div class="input">
                        <input type="number" placeholder="Minimum" @bind="minPrice" />
                        <span></span>
                        <input type="number" placeholder="Maximum" @bind="maxPrice" />
                    </div>
                </div>
            </div>

            <!-- Filter Buttons -->
            <div class="actions">
                <button class="primary black" @onclick="ApplyFilters">Apply</button>
                <button class="outline" @onclick="ClearFilters">Clear Filters</button>
            </div>
        </div>

        <div class="main">
            <div class="header-options">
                <!-- Search Bar -->
                <div class="searchbar">
                    <input placeholder="Search products" @bind="searchQuery" @oninput="SearchProducts" />
                </div>
            </div>

            <!-- Products List -->
            <div class="products products-grid c-3">
                @foreach (var product in products)
                {
                    <ProductsCard Product="product" />
                }
            </div>
        </div>
    </section>
</div>

@code {
    private List<Product> allProducts = new();
    private List<Product> products = new();
    private List<string> categories = new() { "All", "Featured", "Living Room", "Bedroom", "Kitchen", "Dining Room", "Outdoor" };
    private List<string> availableTypes = new();
    private List<string> selectedTypes = new();
    private string selectedCategory = "All";
    private string searchQuery = "";
    private decimal? minPrice;
    private decimal? maxPrice;

    private Dictionary<string, string> categoryImages = new()
    {
        { "All", "default.png" },
        { "Featured", "featured.png" },
        { "Living Room", "living_room.png" },
        { "Bedroom", "bedroom.png" },
        { "Kitchen", "kitchen.png" },
        { "Dining Room", "dining_room.png" },
        { "Outdoor", "outdoor.png" },
    };

    protected override async Task OnInitializedAsync()
    {
        // Fetch products from API
        allProducts = await Http.GetFromJsonAsync<List<Product>>("https://prof-elec.vercel.app/products");
        products = new List<Product>(allProducts);
        UpdateTypeFilters(selectedCategory); // Initialize types for the default category
    }

    private void ChangeCategory(string category)
    {
        selectedCategory = category;

        // Filter products by selected category
        products = category == "All"
            ? allProducts
            : allProducts.Where(p => p.Category.Equals(category, StringComparison.OrdinalIgnoreCase)).ToList();

        UpdateTypeFilters(category);
    }

    private void UpdateTypeFilters(string category)
    {
        // Dynamically update type filters based on the category
        availableTypes = category == "All"
            ? allProducts.Select(p => p.Type).Distinct().ToList()
            : allProducts.Where(p => p.Category.Equals(category, StringComparison.OrdinalIgnoreCase))
                         .Select(p => p.Type)
                         .Distinct()
                         .ToList();
    }

    private string GetCategoryImage()
    {
        // Dynamically fetch category image or use default
        return categoryImages.TryGetValue(selectedCategory, out var img)
            ? $"/assets/images/{img}"
            : "/assets/images/default.png";
    }

    private void SearchProducts()
    {
        ApplyFilters(); // Ensure search works with current filters
    }

    private void ApplyFilters()
    {
        // Filter products based on search query, category, types, and price
        products = allProducts
            .Where(p => (string.IsNullOrWhiteSpace(searchQuery) || p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
                        (selectedCategory == "All" || p.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase)) &&
                        (!selectedTypes.Any() || selectedTypes.Contains(p.Type)) &&
                        (!minPrice.HasValue || p.Price >= minPrice.Value) &&
                        (!maxPrice.HasValue || p.Price <= maxPrice.Value))
            .ToList();
    }

    private void ClearFilters()
    {
        // Reset all filters
        selectedCategory = "All";
        searchQuery = string.Empty;
        selectedTypes.Clear();
        minPrice = null;
        maxPrice = null;
        products = new List<Product>(allProducts);
        UpdateTypeFilters(selectedCategory);
    }

    private void FilterByType(string type)
    {
        // Add or remove type from selected filters
        if (selectedTypes.Contains(type))
            selectedTypes.Remove(type);
        else
            selectedTypes.Add(type);

        ApplyFilters();
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public string Type { get; set; }
        public string Category { get; set; }
        public string ImageUrl { get; set; }
    }
}
